[gd_scene load_steps=10 format=2]

[ext_resource path="res://scenes/World.tscn" type="PackedScene" id=1]
[ext_resource path="res://main.gd" type="Script" id=2]
[ext_resource path="res://asset/environment/tree_bg.png" type="Texture" id=3]
[ext_resource path="res://asset/environment/tree_bg_2.png" type="Texture" id=4]
[ext_resource path="res://shaders/bg.shader" type="Shader" id=5]
[ext_resource path="res://scenes/hud_player.tscn" type="PackedScene" id=6]

[sub_resource type="ShaderMaterial" id=1]
shader = ExtResource( 5 )
shader_param/offsetx = 0.0
shader_param/offsety = 0.0

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;
uniform float outline_width = 2.0;
uniform vec4 outline_color: hint_color;

void fragment(){
    vec4 col = texture(TEXTURE, UV);
    vec2 ps = TEXTURE_PIXEL_SIZE * outline_width;
    float a;
    float maxa = col.a;
    float mina = col.a;


    for(float x = -1.0; x <= 1.0; x+=0.05) {
        float y = 1.0 - (x*x);
        if(vec2(x,y) == vec2(0.0)) {
            continue; // ignore the center of kernel
        }

        a = texture(TEXTURE, UV + vec2(x,y)*ps).a;
        maxa = max(a, maxa); 
        mina = min(a, mina);
    }

    for(float x = -1.0; x <= 1.0; x+=0.05) {
        float y = -1.0 + (x*x);
        if(vec2(x,y) == vec2(0.0)) {
            continue; // ignore the center of kernel
        }

        a = texture(TEXTURE, UV + vec2(x,y)*ps).a;
        maxa = max(a, maxa); 
        mina = min(a, mina);
    }


    // Fill transparent pixels only, don't overlap texture
    if(col.a < 0.5) {
        COLOR = mix(col, outline_color, maxa-mina);
    } else {
        COLOR = col;
    }
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/outline_width = 4.0
shader_param/outline_color = null

[node name="main" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="."]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0.47451, 0.85098, 0.992157, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="bg" type="TextureRect" parent="."]
visible = false
modulate = Color( 1, 1, 1, 0.392157 )
material = SubResource( 1 )
margin_left = -77.4003
margin_top = 56.6669
margin_right = 195.6
margin_bottom = 186.667
rect_scale = Vector2( 3, 3 )
texture = ExtResource( 3 )
stretch_mode = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="bg1" type="TextureRect" parent="."]
visible = false
margin_left = 160.254
margin_top = -1.58667
margin_right = 433.254
margin_bottom = 128.413
rect_scale = Vector2( 3, 3 )
texture = ExtResource( 4 )
stretch_mode = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="bg2" type="TextureRect" parent="."]
visible = false
margin_left = -4.19116
margin_top = 29.9369
margin_right = 268.809
margin_bottom = 159.937
rect_scale = Vector2( 3, 3 )
texture = ExtResource( 3 )
stretch_mode = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ViewportContainer" type="ViewportContainer" parent="."]
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="ViewportContainer"]
size = Vector2( 1280, 720 )
transparent_bg = true
handle_input_locally = false
render_target_update_mode = 3

[node name="World" parent="ViewportContainer/Viewport" instance=ExtResource( 1 )]

[node name="CanvasLayer" parent="." instance=ExtResource( 6 )]
